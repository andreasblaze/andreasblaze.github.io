"use strict";(self.webpackChunktech_notes=self.webpackChunktech_notes||[]).push([[2225],{7240:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>p,frontMatter:()=>i,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"scripting/poc-pd_flock_server","title":"PagerDuty - Flock Web Backend Customs | Flask","description":"","source":"@site/docs/scripting/poc-pd_flock_server.md","sourceDirName":"scripting","slug":"/scripting/poc-pd_flock_server","permalink":"/scripting/poc-pd_flock_server","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"pd_flock_server","permalink":"/scripting/pd_flock_server"},"next":{"title":"Git","permalink":"/category/git"}}');var r=t(4848),s=t(8453);const i={},a="PagerDuty - Flock Web Backend Customs | Flask",c={},d=[];function l(e){const n={code:"code",h1:"h1",header:"header",pre:"pre",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"pagerduty---flock-web-backend-customs--flask",children:"PagerDuty - Flock Web Backend Customs | Flask"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",metastring:'title="PdFlockHandler" showLineNumbers',children:'from flask import Flask, request\nimport requests\nimport os\nfrom threading import Thread\nfrom dotenv import load_dotenv\n\nload_dotenv()\n\n# === Config ===\nPD_TOKEN = "<TOKEN>"\nPD_FROM = "andrii.bondariev@example.com"\nFLOCK_HOOK_URL = "https://api.flock.com/hooks/sendMessage/<TOKEN>"\nINCIDENT_ID = "ID"\nBASE_URL = "http://localhost:5000"  # Used to build links\n\n# === Shared headers ===\nPD_HEADERS = {\n    "Authorization": f"Token token={PD_TOKEN}",\n    "Accept": "application/vnd.pagerduty+json;version=2",\n    "Content-Type": "application/json",\n    "From": PD_FROM\n}\n\n# === Flask Web Server ===\napp = Flask(__name__)\n\n@app.route("/acknowledge")\ndef acknowledge():\n    incident_id = request.args.get("id")\n    resp = requests.put(\n        f"https://api.pagerduty.com/incidents/{incident_id}",\n        headers=PD_HEADERS,\n        json={"incident": {"type": "incident_reference", "status": "acknowledged"}}\n    )\n    return f"Acknowledged {incident_id}" if resp.ok else f"Failed: {resp.text}", resp.status_code\n\n@app.route("/snooze")\ndef snooze():\n    incident_id = request.args.get("id")\n    resp = requests.post(\n        f"https://api.pagerduty.com/incidents/{incident_id}/snooze",\n        headers=PD_HEADERS,\n        json={"duration": 14400}\n    )\n    return f"Snoozed {incident_id}" if resp.status_code == 202 else f"Failed: {resp.text}", resp.status_code\n\n# === Flock Message Sender ===\ndef send_flock_message():\n    ack_url = f"{BASE_URL}/acknowledge?id={INCIDENT_ID}"\n    snooze_url = f"{BASE_URL}/snooze?id={INCIDENT_ID}"\n\n    payload = {\n        "text": "PD Test Alert",\n        "attachments": [\n            {\n                "color": "#FFA500",\n                "views": {\n                    "flockml": f"""\n<flockml>\n<b>Incident:</b> {INCIDENT_ID}<br>\n<a href="{ack_url}">Acknowledge</a> | \n<a href="{snooze_url}">Snooze 4h</a>\n</flockml>\n"""\n                }\n            }\n        ]\n    }\n\n    resp = requests.post(FLOCK_HOOK_URL, json=payload)\n    print("Sent to Flock" if resp.ok else f"Flock error: {resp.status_code} {resp.text}")\n\n\n# === Boot ===\nif __name__ == "__main__":\n    # Run Flask in a background thread\n    Thread(target=lambda: app.run(port=5000)).start()\n\n    # Wait briefly for Flask to come online\n    import time\n    time.sleep(1)\n\n    # Send message to Flock\n    send_flock_message()\n\n    import time\n\n    print("Server is running at http://localhost:5000")\n    print("You can now click links in Flock to test.")\n\n    try:\n        while True:\n            time.sleep(60)\n    except KeyboardInterrupt:\n        print("Shutting down.")\n'})})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>a});var o=t(6540);const r={},s=o.createContext(r);function i(e){const n=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),o.createElement(s.Provider,{value:n},e.children)}}}]);