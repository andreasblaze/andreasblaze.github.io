"use strict";(self.webpackChunktech_notes=self.webpackChunktech_notes||[]).push([[6205],{3040:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"scripting/DeleteGrafanaUser","title":"Grafana User Deletion | LDAP | Dry Run","description":"","source":"@site/docs/scripting/DeleteGrafanaUser.md","sourceDirName":"scripting","slug":"/scripting/DeleteGrafanaUser","permalink":"/scripting/DeleteGrafanaUser","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Python Zabbix - Active Directory Federation Services (ADFS) Users Validation","permalink":"/scripting/zabbix-ad-user-validation"},"next":{"title":"GET Grafana Users","permalink":"/scripting/GetGrafanaUsers"}}');var a=r(4848),s=r(8453);const i={},l="Grafana User Deletion | LDAP | Dry Run",o={},d=[];function p(e){const n={code:"code",h1:"h1",header:"header",pre:"pre",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"grafana-user-deletion--ldap--dry-run",children:"Grafana User Deletion | LDAP | Dry Run"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",metastring:'title="ZabbixUserValidationChecker" showLineNumbers',children:'import requests\nimport ldap\nimport json\n\n# ==== Config ====\ngrafana_url = "https://grafana.com"\napi_token = "<GRAFANA-API-TOKEN>"\nca_bundle_path = "/etc/ssl/certs/example_rca.pem"\nldap_server = "ldaps://prod.example.net"\nldap_user = "sa-user@prod.example.net"\nldap_password = "<LDAP-SA-PASSWORD>"\nbase_dn = "OU=Example,DC=prod,DC=example,DC=net"\n\n# Safe mode\ndry_run = True\n\n# Skip deletion for these users\nwhitelist = [\n    "admin",\n    "test"\n]\n\n# ==== Setup Grafana ====\nheaders = {\n    "Authorization": f"Bearer {api_token}",\n    "Content-Type": "application/json"\n}\nlist_users_url = f"{grafana_url}/api/org/users"\ndelete_user_url = f"{grafana_url}/api/org/users"  # /:id\n\n# ==== Setup LDAP ====\nldap_conn = ldap.initialize(ldap_server)\nldap_conn.set_option(ldap.OPT_REFERRALS, 0)\nldap_conn.simple_bind_s(ldap_user, ldap_password)\n\ndef is_user_active_in_ad(email):\n    filter = f"(&(mail={email})(!(userAccountControl:1.2.840.113556.1.4.803:=2)))"\n    try:\n        result = ldap_conn.search_s(base_dn, ldap.SCOPE_SUBTREE, filter, ["userPrincipalName"])\n        return len(result) > 0\n    except ldap.LDAPError as e:\n        print(f"LDAP error for {email}: {e}")\n        return False\n\ndef delete_grafana_user(user_id, user_email):\n    delete_url = f"{delete_user_url}/{user_id}"\n    try:\n        res = requests.delete(delete_url, headers=headers, verify=ca_bundle_path)\n        if res.status_code == 200:\n            print(f"Deleted: {user_email}")\n        else:\n            print(f"Failed to delete {user_email}: {res.status_code} {res.text}")\n    except Exception as e:\n        print(f"Request error deleting {user_email}: {e}")\n\ndef main():\n    try:\n        response = requests.get(list_users_url, headers=headers, verify=ca_bundle_path)\n        response.raise_for_status()\n        users = response.json()\n    except Exception as e:\n        print(f"Failed to get users: {e}")\n        return\n\n    total = len(users)\n    deleted = 0\n    skipped = 0\n    for u in users:\n        email = u.get("email")\n        name = u.get("name")\n        uid = u.get("userId")\n\n        if not email or email in whitelist:\n            skipped += 1\n            continue\n\n        if is_user_active_in_ad(email):\n            skipped += 1\n            continue\n\n        print(f"Inactive in AD: {name} ({email})")\n        if not dry_run:\n            delete_grafana_user(uid, email)\n            deleted += 1\n        else:\n            print(f"Dry run: would delete user {email} (ID {uid})")\n\n    print("\\n=== Summary ===")\n    print(f"Total Grafana users: {total}")\n    print(f"Skipped: {skipped}")\n    print(f"To delete: {total - skipped}")\n    print(f"{\'Dry run \u2014 nothing deleted.\' if dry_run else f\'Deleted: {deleted}\'}")\n\nif __name__ == "__main__":\n    main()\n'})})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(p,{...e})}):p(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>i,x:()=>l});var t=r(6540);const a={},s=t.createContext(a);function i(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);