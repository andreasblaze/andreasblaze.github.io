"use strict";(self.webpackChunktech_notes=self.webpackChunktech_notes||[]).push([[3813],{9409:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>m,frontMatter:()=>s,metadata:()=>o,toc:()=>p});var a=n(5893),r=n(1151);const s={sidebar_position:2},i="Python Backup Script With AWS S3 Integration",o={id:"scripting/backup-script",title:"Python Backup Script With AWS S3 Integration",description:"MariaDB",source:"@site/docs/scripting/backup-script.md",sourceDirName:"scripting",slug:"/scripting/backup-script",permalink:"/scripting/backup-script",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Python",permalink:"/scripting/python"},next:{title:"Python Zabbix - Active Directory Federation Services (ADFS) Users Validation",permalink:"/scripting/zabbix-ad-user-validation"}},c={},p=[{value:"MariaDB",id:"mariadb",level:2},{value:"PostgresDB",id:"postgresdb",level:2}];function u(e){const t={code:"code",h1:"h1",h2:"h2",pre:"pre",...(0,r.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.h1,{id:"python-backup-script-with-aws-s3-integration",children:"Python Backup Script With AWS S3 Integration"}),"\n",(0,a.jsx)(t.h2,{id:"mariadb",children:"MariaDB"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",metastring:'title="MariaDB Backup" showLineNumbers',children:'#crontab -l / crontab -e\n#PATH=/usr/local/bin:/usr/bin:/bin\n#PYTHONPATH=/usr/local/bin/python2.7\n#\n#30 18 * * 6 /usr/local/bin/python2.7 /root/backup/backup-script.py >> /root/backup/logfile.log 2>&1 18:30 every Saturday\n#0 0 * * * /usr/lib/clamav-signatures/clam_scan.sh random\n\nimport os, subprocess, time, socket, smtplib, traceback\nfrom email.mime.text import MIMEText\nfrom email.mime.multipart import MIMEMultipart\nfrom email.mime.application import MIMEApplication\n\n#Path Configuration\nhostname = socket.gethostname()\nbackup_file = time.strftime("%Y_%m_%d_") + socket.gethostname() + "_maria" + ".tar.bz2"\ns3path = "s3://backups/users/zabbix/maria/" + backup_file\n\n#Mail Configuration\nmail_server = \'mailauth-server.net\'\nmail_login = \'mailauth\'\nmail_password = \'password\'\nsender = "backups@example.com"\nreceivers = ["andreas@blaze.com"]\nport = 465\n\n# Initialize size_mb to None\nsize_mb = None\n\n# Run mariabackup to create a backup\n\nbackup_command = "mariabackup --user=root --backup --stream=xbstream |lbzip2 -n 6 -9 | s3cmd --server-side-encryption put - {} --multipart-chunk-size-mb=100 --stop-on-error".format(s3path)\n\nbackup_process = subprocess.Popen(backup_command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)\nbackup_output, backup_error = backup_process.communicate()\n\nif backup_process.returncode != 0:\n    # Backup failed\n    status = "Backup failed with error: " + backup_error.strip()\n    print("Backup failed with error: " + backup_error.strip())\n    # Send error email here\n\nelse:\n    # Backup succeeded\n    status = "Backup and upload to s3 succeeded!"\n    print("Backup and upload to s3 succeeded!")\n    # Send success email here\n\n# Compose email message\nmsg = MIMEMultipart()\nmsg[\'From\'] = sender\nmsg[\'To\'] = ", ".join(receivers)\nmsg[\'Subject\'] = "MariaDB backup report for " + hostname\n\n# Add email body text\nif size_mb is not None:\n    text = "Backup status: {}\\nBackup size: {} MB".format(status, size_mb)\nelse:\n    text = "Backup status: {}".format(status)\nmsg.attach(MIMEText(text, \'plain\'))\n\n# Get the traceback message\ntraceback_msg = traceback.format_exc()\n\n# Add traceback message to email if there\'s an error\nif "Traceback" in traceback_msg:\n    text += "\\n\\nTraceback:\\n{}".format(traceback_msg)\n    msg.attach(MIMEText(text, \'plain\'))\n\n# Send email\nserver = smtplib.SMTP_SSL(mail_server, port)\ntry:\n    server.login(mail_login, mail_password)\n    server.sendmail(sender, receivers, msg.as_string())\n    print("Email sent successfully")\nexcept Exception as e:\n    print("Error sending email: {}".format(str(e)))\nfinally:\n    server.quit()\n\n# Print status\nprint(status)\n'})}),"\n",(0,a.jsx)(t.h2,{id:"postgresdb",children:"PostgresDB"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",metastring:'title="PostgresDB Backup" showLineNumbers',children:'#crontab -l / crontab -e\n#PATH=/usr/local/bin:/usr/bin:/bin\n#PYTHONPATH=/usr/local/bin/python2.7\n#\n#30 18 * * 7 /usr/bin/python3 /root/backup/backup-script.py >> /root/backup/logfile.log 2>&1 (18:30 every Sunday)\n#0 0 * * * /usr/lib/clamav-signatures/clam_scan.sh random\n\nimport os, subprocess, time, socket, smtplib, traceback\nfrom email.mime.text import MIMEText\nfrom email.mime.multipart import MIMEMultipart\nfrom email.mime.application import MIMEApplication\n\n#Path Configuration\nhostname = socket.gethostname()\nbackup_file = time.strftime("%Y_%m_%d_") + socket.gethostname() + "_postgres" + ".tar.bz2"\ns3path = "s3://backups/users/zabbix/postgres/" + backup_file\n\n#Mail Configuration\nmail_server = \'mailauth-server.net\'\nmail_login = \'mailauth\'\nmail_password = \'password\'\nsender = "backups@example.com"\nreceivers = ["andreas@blaze.com"]\nport = 465\n\n# Initialize size_mb to None\nsize_mb = None\n\n# Run pg_basebackup to create a backup\nbackup_command = "pg_basebackup -Xf --format=tar -h localhost -U postgres -D - | lbzip2 -n 6 -9 | s3cmd --server-side-encryption put - {} --multipart-chunk-size-mb=100 --stop-on-error".format(s3path)\n\nbackup_process = subprocess.Popen(backup_command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)\nbackup_output, backup_error = backup_process.communicate()\n\nif backup_process.returncode != 0:\n    # Backup failed\n    status = "Backup failed with error: " + backup_error.strip()\n    print("Backup failed with error: " + backup_error.strip())\n    # Send error email here\n\nelse:\n    # Backup succeeded\n    status = "Backup and upload to s3 succeeded!"\n    print("Backup and upload to s3 succeeded!")\n    # Send success email here\n\n# Compose email message\nmsg = MIMEMultipart()\nmsg[\'From\'] = sender\nmsg[\'To\'] = ", ".join(receivers)\nmsg[\'Subject\'] = "PostgresDB backup report for " + hostname\n\n# Add email body text\nif size_mb is not None:\n    text = "Backup status: {}\\nBackup size: {} MB".format(status, size_mb)\nelse:\n    text = "Backup status: {}".format(status)\nmsg.attach(MIMEText(text, \'plain\'))\n\n# Get the traceback message\ntraceback_msg = traceback.format_exc()\n\n# Add traceback message to email if there\'s an error\nif "Traceback" in traceback_msg:\n    text += "\\n\\nTraceback:\\n{}".format(traceback_msg)\n    msg.attach(MIMEText(text, \'plain\'))\n\n# Send email\nserver = smtplib.SMTP_SSL(mail_server, port)\ntry:\n    server.login(mail_login, mail_password)\n    server.sendmail(sender, receivers, msg.as_string())\n    print("Email sent successfully")\nexcept Exception as e:\n    print("Error sending email: {}".format(str(e)))\nfinally:\n    server.quit()\n\n# Print status\nprint(status)\n'})})]})}function m(e={}){const{wrapper:t}={...(0,r.a)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(u,{...e})}):u(e)}},1151:(e,t,n)=>{n.d(t,{Z:()=>o,a:()=>i});var a=n(7294);const r={},s=a.createContext(r);function i(e){const t=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),a.createElement(s.Provider,{value:t},e.children)}}}]);